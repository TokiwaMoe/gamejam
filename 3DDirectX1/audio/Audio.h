#pragma once
#include<Windows.h>
#include<xaudio2.h>
#include<wrl.h>
class XAudio2VoiceCallback : public IXAudio2VoiceCallback
{
public:
	// ボイス処理パスの開始時
	//STDMETHOD_(void, OnVoiceProcessingPassStart) (THIS_ UINT32 BytesRequired) {};
	void OnVoiceProcessingPassStart(UINT32 BytesRequired) {};
	// ボイス処理パスの終了時
	STDMETHOD_(void, OnVoiceProcessingPassEnd) (THIS) {};
	// バッファストリームの再生が終了した時
	STDMETHOD_(void, OnStreamEnd) (THIS) {};
	// バッファの使用開始時
	STDMETHOD_(void, OnBufferStart) (THIS_ void* pBufferContext) {};
	// バッファの末尾に達した時
	STDMETHOD_(void, OnBufferEnd) (THIS_ void* pBufferContext) {
		// バッファを解放する
		delete[] pBufferContext;
	};
	// 再生がループ位置に達した時
	STDMETHOD_(void, OnLoopEnd) (THIS_ void* pBufferContext) {};
	// ボイスの実行エラー時
	STDMETHOD_(void, OnVoiceError) (THIS_ void* pBufferContext, HRESULT Error) {};
};
//チャンクヘッダ
struct ChunkHeader
{
	char id[4];			//チャンク毎のID
	int size;		//チャンクサイズ
};

//RIFFヘッダチャンク
struct RiffHeader
{
	ChunkHeader chunk;		//"RIFF"
	char type[4];			//"WAVE"
};

//FMIチャンク
struct FormatChunk
{
	ChunkHeader chunk;		//"fmt"
	WAVEFORMATEX fmt;		//波形フォーマット
};
//e
//音声データ
struct SoundData
{
	//波形フォーマット
	WAVEFORMATEX wfex;
	//バッファの先頭アドレス
	BYTE* pBuffer;
	//バッファのサイズ
	unsigned int bufferSize;
};
class Audio {
private:
	//Microsoft::WRL::を省略する
	template <class T> using ComPtr = Microsoft::WRL::ComPtr<T>;


public:


	bool Initialize();
	/// <summary>
	/// 音ロードする
	/// </summary>
	/// <param name="filename"></param>
	/// <returns></returns>
	static SoundData SoundLoadWave(const char* filename);
	/// <summary>
	/// SEを再生
	/// </summary>
	/// <param name="soundData"></param>
	void SEPlayWave(const SoundData& soundData);
	/// <summary>
	/// BGMを再生
	/// </summary>
	/// <param name="soundData"></param>
	void SoundPlayWave(const SoundData& soundData);
	/// <summary>
	/// BGMの停止
	/// </summary>
	void StopWave();
	/// <summary>
	/// SEの音量調節
	/// </summary>
	/// <param name="volume"></param>
	void SetSEVolume(float volume);
	/// <summary>
	/// BGMの音量調節
	/// </summary>
	/// <param name="volume"></param>
	void SetBGMVolume(float volume);

private: //変数
	ComPtr<IXAudio2> xAudio2;
	IXAudio2MasteringVoice* masterVoice;
	XAudio2VoiceCallback voiceCallback;
	IXAudio2SourceVoice* pSourceSEVoice = nullptr;
	IXAudio2SourceVoice* pSourceVoice = nullptr;
};